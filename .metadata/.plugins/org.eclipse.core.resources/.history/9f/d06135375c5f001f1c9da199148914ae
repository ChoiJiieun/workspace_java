package ch13_thread.issac;

import java.util.LinkedList;
import java.util.Queue;

public class Issac {
	private int toast = 0;
	// Queue : first in first out
	private final Queue<String> orderList = new LinkedList<>();
	
	private Issac() {
		
	}
	// 싱글톤 적용
	private static Issac instance = new Issac();
	public static Issac getInstance() {
		return instance;
	}
	// 토스트 만들기 (chef 클래스 사용)
	// 멀티 스레딩 환경에서 여러 스레드가 동시에 같은 객체나 메서드 블로에 접근하는
	// 것을 방지하기 위해서 synchronized (동기화 유지 시켜줘야됨)
	public synchronized void makeToast() {
		toast += 1;
		System.out.println("토스트 1개를 만들었습니다. 재고 : " + toast);
		notifyAll();  // 대기중(wait)인 모든 스레드를 깨운다.
	}
	
	// 토스트 구매 (customer 클래스 사용)
	public synchronized void buyToast(String name, int count) {
		orderList.add(name);
		// peek은 처음께 뭔지
		while (orderList.peek() != name || toast < count) {
			try {
				wait();  // 현재 주문이 맨 앞이 아니거나, 토스트가 충분하지 않으면 대기
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
